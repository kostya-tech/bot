import { graph } from './dist/src/agent/graph.js';

async function runJokeBotDemo() {
    console.log('üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ñ–∞—Ä—Ç-–ë–æ—Ç–∞\n');
    console.log('='.repeat(60));

    // Scenario conversation flow
    const conversation = [
        "–ü—Ä–∏–≤—ñ—Ç!",        // Trigger greeting
        "–ö–æ—Å—Ç—è",          // User provides name
        "—Ç–∞–∫",            // User wants a joke
        "—Ç–∞–∫",            // User wants another joke
        "—Ç–∞–∫",            // User wants another joke
        "–Ω—ñ"              // User doesn't want more jokes
    ];

    let currentState = {
        messages: [],
        conversationStage: "greeting",
        userName: "",
        jokesCount: 0
    };

    for (let i = 0; i < conversation.length; i++) {
        const userMessage = conversation[i];

        console.log(`\nüîÑ –ö—Ä–æ–∫ ${i + 1}:`);
        console.log(`üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: "${userMessage}"`);
        console.log(`üìä –°—Ç–∞–Ω: ${currentState.conversationStage}, –ñ–∞—Ä—Ç—ñ–≤: ${currentState.jokesCount}`);

        try {
            // Add user message to state
            const inputState = {
                ...currentState,
                messages: [...currentState.messages, { role: "user", content: userMessage }]
            };

            const result = await graph.invoke(inputState, { recursionLimit: 5 });

            // Get bot response
            const botResponse = result.messages[result.messages.length - 1].content;
            console.log(`ü§ñ –ë–æ—Ç: "${botResponse}"`);

            // Update state for next iteration
            currentState = {
                messages: result.messages,
                conversationStage: result.conversationStage || currentState.conversationStage,
                userName: result.userName || currentState.userName,
                jokesCount: result.jokesCount || currentState.jokesCount
            };

            // Add a small delay for readability
            await new Promise(resolve => setTimeout(resolve, 1000));

        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
            break;
        }
    }

    console.log('\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   ‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${currentState.messages.length}`);
    console.log(`   ‚Ä¢ –†–æ–∑–∫–∞–∑–∞–Ω–æ –∂–∞—Ä—Ç—ñ–≤: ${currentState.jokesCount}`);
    console.log(`   ‚Ä¢ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω: ${currentState.conversationStage}`);
}

// Run the demo
runJokeBotDemo().catch(console.error); 
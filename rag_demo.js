#!/usr/bin/env node

/**
 * RAG Joke Bot Demo
 * Demonstrates semantic search and LLM-generated responses
 */

import { HumanMessage } from "@langchain/core/messages";
import { createRAGGraph } from "./dist/agent/ragGraph.js";

// Mock environment for demo (in real app, use .env file)
process.env.OPENAI_API_KEY = process.env.OPENAI_API_KEY || "demo-key";

async function runRAGDemo() {
    console.log("üöÄ Starting RAG Joke Bot Demo");
    console.log("=====================================");

    try {
        // Create RAG graph
        const graph = createRAGGraph();

        // Demo conversation scenarios
        const scenarios = [
            {
                name: "üîç Semantic Search Demo",
                messages: [
                    "–ü—Ä–∏–≤—ñ—Ç!",
                    "–ö–æ—Å—Ç—è",
                    "—Ä–æ–∑–∫–∞–∂–∏ –∂–∞—Ä—Ç –ø—Ä–æ –∫–æ–º–ø'—é—Ç–µ—Ä–∏", // Should find computer-related jokes
                    "—Ç–∞–∫",
                    "—Ä–æ–∑–∫–∞–∂–∏ —â–æ—Å—å –ø—Ä–æ JavaScript", // Should find JS-specific jokes
                    "–Ω—ñ"
                ]
            },
            {
                name: "üéØ Category-based Retrieval",
                messages: [
                    "–ü—Ä–∏–≤—ñ—Ç!",
                    "–ú–∞—Ä—ñ—è",
                    "—Ö–æ—á—É –∂–∞—Ä—Ç –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", // Should find programming jokes
                    "—Ç–∞–∫",
                    "—â–µ –æ–¥–∏–Ω —Å–∫–ª–∞–¥–Ω–∏–π –∂–∞—Ä—Ç", // Should find hard difficulty jokes
                    "–Ω—ñ"
                ]
            },
            {
                name: "ü§ñ LLM Intent Analysis",
                messages: [
                    "–î–æ–±—Ä–∏–π –¥–µ–Ω—å!",
                    "–û–ª–µ–∫—Å–∞–Ω–¥—Ä",
                    "–º–æ–∂–Ω–∞ –∂–∞—Ä—Ç–∏–∫?", // Different way to ask for joke
                    "–∑–≤–∏—á–∞–π–Ω–æ!",
                    "–¥–æ—Å–∏—Ç—å", // Different way to say no
                ]
            }
        ];

        for (const scenario of scenarios) {
            console.log(`\n${scenario.name}`);
            console.log("‚îÄ".repeat(50));

            let state = {
                messages: [],
                conversationStage: "greeting",
                userName: "–Ω–µ–≤—ñ–¥–æ–º–∏–π",
                jokesCount: 0,
                lastUserQuery: "",
                retrievedContext: [],
                userPreferences: {},
                conversationHistory: []
            };

            for (const userInput of scenario.messages) {
                console.log(`\nüë§ User: ${userInput}`);

                // Add user message to state
                state.messages.push(new HumanMessage(userInput));

                // Process through RAG graph
                const result = await graph.invoke(state);

                // Get bot response
                const lastMessage = result.messages[result.messages.length - 1];
                console.log(`ü§ñ Bot: ${lastMessage.content}`);

                // Show RAG insights
                if (result.retrievedContext && result.retrievedContext.length > 0) {
                    console.log(`üìä Retrieved ${result.retrievedContext.length} relevant jokes`);
                    result.retrievedContext.forEach((joke, i) => {
                        console.log(`   ${i + 1}. Category: ${joke.metadata.category}, Difficulty: ${joke.metadata.difficulty}`);
                    });
                }

                if (result.userPreferences && result.userPreferences.preferredJokeCategory) {
                    console.log(`üéØ Learned preference: ${result.userPreferences.preferredJokeCategory}`);
                }

                // Update state for next iteration
                state = result;

                // Small delay for readability
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

            console.log(`\n‚úÖ Scenario completed. Total jokes told: ${state.jokesCount}`);
        }

    } catch (error) {
        console.error("‚ùå Demo failed:", error.message);

        if (error.message.includes("API key")) {
            console.log("\nüí° To run with real OpenAI API:");
            console.log("1. Get API key from https://platform.openai.com/");
            console.log("2. Set environment variable: export OPENAI_API_KEY=your_key");
            console.log("3. Run: npm run demo:rag");
        }
    }

    console.log("\nüéâ RAG Demo completed!");
}

// Run demo if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
    runRAGDemo().catch(console.error);
}

export { runRAGDemo }; 
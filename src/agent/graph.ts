/**
 * Joke Bot - State-based conversation flow
 * Scenario: Ask user's name ‚Üí Greet personally ‚Üí Ask for joke ‚Üí Tell jokes ‚Üí Ask for more ‚Üí Repeat or end
 */
import { StateGraph } from "@langchain/langgraph";
import { RunnableConfig } from "@langchain/core/runnables";
import { StateAnnotation } from "./state.js";

// Collection of jokes for the bot to tell
const JOKES = [
  "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –Ω–µ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É? –¢–æ–º—É —â–æ —Ç–∞–º –∑–∞–±–∞–≥–∞—Ç–æ –±–∞–≥—ñ–≤! üêõ",
  "–©–æ —Å–∫–∞–∑–∞–≤ –æ–¥–∏–Ω –±–∞–π—Ç —ñ–Ω—à–æ–º—É? –ù—ñ—á–æ–≥–æ, –≤–æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–º—ñ–Ω—è–ª–∏—Å—è –±—ñ—Ç–∞–º–∏! üíæ",
  "–ß–æ–º—É –∫–æ–º–ø'—é—Ç–µ—Ä–∏ –Ω—ñ–∫–æ–ª–∏ –Ω–µ —Ö–≤–æ—Ä—ñ—é—Ç—å? –¢–æ–º—É —â–æ —É –Ω–∏—Ö —î –∞–Ω—Ç–∏–≤—ñ—Ä—É—Å! ü¶†",
  "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç, —è–∫–∏–π –Ω–µ –ø'—î –∫–∞–≤—É? –ù–µ—Ä–æ–±–æ—á–∏–π! ‚òï",
  "–ß–æ–º—É JavaScript —Ä–æ–∑–ª—É—á–∏–≤—Å—è –∑ HTML? –¢–æ–º—É —â–æ –≤–æ–Ω–∏ –Ω–µ –º–æ–≥–ª–∏ –∑–Ω–∞–π—Ç–∏ —Å–ø—ñ–ª—å–Ω–∏–π DOM! üåê",
  "–©–æ —Ä–æ–±–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç, –∫–æ–ª–∏ –Ω–µ –º–æ–∂–µ –∑–∞—Å–Ω—É—Ç–∏? –†–∞—Ö—É—î –æ–≤–µ—Ü—å –≤ —Ü–∏–∫–ª—ñ while! üêë",
  "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–ª—É—Ç–∞—é—Ç—å –†—ñ–∑–¥–≤–æ –∑ –•–µ–ª–æ–≤—ñ–Ω–æ–º? –¢–æ–º—É —â–æ Oct 31 = Dec 25! üéÉüéÑ",
];

/**
 * Main conversation handler - analyzes user input and responds based on current stage
 */
const handleConversation = async (
  state: typeof StateAnnotation.State,
  _config: RunnableConfig,
): Promise<typeof StateAnnotation.Update> => {
  console.log("Current state:", {
    stage: state.conversationStage || "greeting",
    jokesCount: state.jokesCount || 0,
    userName: state.userName || "–Ω–µ–≤—ñ–¥–æ–º–∏–π",
    messagesCount: state.messages.length
  });

  const lastMessage = state.messages[state.messages.length - 1];
  const userInput = lastMessage?.content?.toString().trim() || "";
  const currentStage = state.conversationStage || "greeting";

  // Initialize default values if not set
  const userName = state.userName || "";
  const jokesCount = state.jokesCount || 0;

  switch (currentStage) {
    case "greeting":
      // Bot asks for user's name
      return {
        messages: [{
          role: "assistant",
          content: `–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–∂–∞—Ä—Ç—ñ–≤–Ω–∏–∫. –Ø–∫ —Ç–µ–±–µ –∑–≤—É—Ç—å? ü§ñ`
        }],
        conversationStage: "waiting_for_name",
        userName,
        jokesCount
      };

    case "waiting_for_name":
      // User provides their name
      if (userInput.length > 0) {
        // Extract name (simple approach - take the input as name)
        const extractedName = userInput.replace(/–º–µ–Ω–µ –∑–≤—É—Ç—å|—è|–º–æ—î —ñ–º'—è/gi, '').trim();
        const finalName = extractedName || userInput;

        return {
          messages: [{
            role: "assistant",
            content: `–ü—Ä–∏–≤—ñ—Ç, ${finalName}! –ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è! üòä\n\n–•–æ—á–µ—à –ø–æ—Å–ª—É—Ö–∞—Ç–∏ –∂–∞—Ä—Ç? üé≠`
          }],
          conversationStage: "asking_for_joke",
          userName: finalName,
          jokesCount
        };
      } else {
        return {
          messages: [{
            role: "assistant",
            content: `–°–∫–∞–∂–∏ –º–µ–Ω—ñ —Å–≤–æ—î —ñ–º'—è, –±—É–¥—å –ª–∞—Å–∫–∞! üòä`
          }],
          conversationStage: "waiting_for_name",
          userName,
          jokesCount
        };
      }

    case "asking_for_joke":
      // Check if user wants a joke
      if (userInput.toLowerCase().includes("—Ç–∞–∫") || userInput.toLowerCase().includes("yes") ||
        userInput.toLowerCase().includes("—Ö–æ—á—É") || userInput.toLowerCase().includes("–¥–∞–≤–∞–π")) {
        const joke = JOKES[jokesCount % JOKES.length];
        return {
          messages: [{
            role: "assistant",
            content: `–û—Å—å –∂–∞—Ä—Ç –¥–ª—è —Ç–µ–±–µ, ${userName}:\n\n${joke}\n\n–•–æ—á–µ—à —â–µ –æ–¥–∏–Ω? üòÑ`
          }],
          conversationStage: "asking_for_more",
          userName,
          jokesCount: jokesCount + 1
        };
      } else if (userInput.toLowerCase().includes("–Ω—ñ") || userInput.toLowerCase().includes("no")) {
        return {
          messages: [{
            role: "assistant",
            content: `–î–æ–±—Ä–µ, ${userName}! –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à - —Å–∫–∞–∂–∏ "—Ç–∞–∫"! üòä`
          }],
          conversationStage: "asking_for_joke",
          userName,
          jokesCount
        };
      } else {
        return {
          messages: [{
            role: "assistant",
            content: `${userName}, —Å–∫–∞–∂–∏ "—Ç–∞–∫" —è–∫—â–æ —Ö–æ—á–µ—à –∂–∞—Ä—Ç, –∞–±–æ "–Ω—ñ" —è–∫—â–æ –Ω–µ —Ö–æ—á–µ—à ü§î`
          }],
          conversationStage: "asking_for_joke",
          userName,
          jokesCount
        };
      }

    case "asking_for_more":
      // Check if user wants another joke
      if (userInput.toLowerCase().includes("—Ç–∞–∫") || userInput.toLowerCase().includes("yes") ||
        userInput.toLowerCase().includes("—â–µ") || userInput.toLowerCase().includes("–¥–∞–≤–∞–π") ||
        userInput.toLowerCase().includes("—Ö–æ—á—É")) {
        const joke = JOKES[jokesCount % JOKES.length];
        return {
          messages: [{
            role: "assistant",
            content: `–û—Å—å —â–µ –æ–¥–∏–Ω –∂–∞—Ä—Ç –¥–ª—è —Ç–µ–±–µ, ${userName}:\n\n${joke}\n\n–•–æ—á–µ—à —â–µ –æ–¥–∏–Ω? üòÑ`
          }],
          conversationStage: "asking_for_more",
          userName,
          jokesCount: jokesCount + 1
        };
      } else if (userInput.toLowerCase().includes("–Ω—ñ") || userInput.toLowerCase().includes("no") ||
        userInput.toLowerCase().includes("–¥–æ—Å–∏—Ç—å") || userInput.toLowerCase().includes("—Å—Ç–æ–ø")) {
        return {
          messages: [{
            role: "assistant",
            content: `–î—è–∫—É—é –∑–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, ${userName}! –ë—É–ª–æ –≤–µ—Å–µ–ª–æ —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—Ç–∏ –∂–∞—Ä—Ç–∏! –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! üëãüòä`
          }],
          conversationStage: "conversation_ended",
          userName,
          jokesCount
        };
      } else {
        return {
          messages: [{
            role: "assistant",
            content: `${userName}, —Å–∫–∞–∂–∏ "—Ç–∞–∫" —è–∫—â–æ —Ö–æ—á–µ—à —â–µ –æ–¥–∏–Ω –∂–∞—Ä—Ç, –∞–±–æ "–Ω—ñ" —â–æ–± –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É ü§î`
          }],
          conversationStage: "asking_for_more",
          userName,
          jokesCount
        };
      }

    case "conversation_ended":
      // Conversation is over, but user can restart
      if (userInput.toLowerCase().includes("–ø—Ä–∏–≤—ñ—Ç") || userInput.toLowerCase().includes("hello") ||
        userInput.toLowerCase().includes("–ø–æ—á–∞—Ç–∏") || userInput.toLowerCase().includes("–∑–Ω–æ–≤—É")) {
        return {
          messages: [{
            role: "assistant",
            content: `–ü—Ä–∏–≤—ñ—Ç –∑–Ω–æ–≤—É! –ì–æ—Ç–æ–≤–∏–π –¥–æ –Ω–æ–≤–∏—Ö –∂–∞—Ä—Ç—ñ–≤? –Ø–∫ —Ç–µ–±–µ –∑–≤—É—Ç—å? ü§ñ`
          }],
          conversationStage: "waiting_for_name",
          userName: "", // Reset name for new conversation
          jokesCount: 0 // Reset jokes counter for new conversation
        };
      } else {
        return {
          messages: [{
            role: "assistant",
            content: `–†–æ–∑–º–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–∫–∞–∂–∏ "–ø—Ä–∏–≤—ñ—Ç" —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É! üòä`
          }],
          conversationStage: "conversation_ended",
          userName,
          jokesCount
        };
      }

    default:
      // Fallback to greeting stage
      return {
        messages: [{
          role: "assistant",
          content: `–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –î–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É! –Ø–∫ —Ç–µ–±–µ –∑–≤—É—Ç—å? ü§ñ`
        }],
        conversationStage: "waiting_for_name",
        userName: "",
        jokesCount: 0
      };
  }
};

/**
 * Routing function: Determines the next step based on conversation stage
 */
export const route = (
  _state: typeof StateAnnotation.State,
): "__end__" => {
  // Always end after processing one message
  // The demo script will handle the conversation flow
  return "__end__";
};

// Create the conversation graph
const builder = new StateGraph(StateAnnotation)
  .addNode("handleConversation", handleConversation)
  .addEdge("__start__", "handleConversation")
  .addConditionalEdges("handleConversation", route);

export const graph = builder.compile();

graph.name = "Joke Bot";
